#pragma once

#include "Particle.h"
#include "../ForceGenerator/ParticleForceGenerator/ForceGenerationRegistry.h"
#include "../ParticleCollision.h"
#include "../ParticleCollisionGenerator.h"
#include "../ParticleCollisionResolver.h"

namespace Physic
{
	// A struct that holds all the force generators of a certain particle
	struct ParticleForceGenerators
	{
		Particle* particle;
		ForceGenerationRegistry* registry;
	};

	class ParticleManager
	{
	public:
		ParticleManager();
		ParticleManager(unsigned int maxContacts, unsigned int numIterations);
		~ParticleManager();

		// Generator contact collisions
		unsigned int GenerateCollisions();
		// Update call for each frame
		void PhysicsUpdate();
		// Updates all particles
		void UpdateParticles();
		// Updates all forces with all particles
		void UpdateForces();

	public:
		// All the particles of the game world 
		std::list<Particle> particles;
		// These are the collision events generated by the collision handler and resolved by the resolver
		std::list<ParticleCollision> particleCollisions; 
		// Store the particles to force generators that they own
		std::list<ParticleForceGenerators> forceGenerationRegistry;
		// This will store all the collision generators
		std::list<std::shared_ptr<ParticleCollisionGenerator>> particleCollisionGenerators;
		// We will need a collision resolver system
		ParticleCollisionResolver collisionResolver; 

		unsigned int maxContacts; // The maximum number of contacts that we will handle at a current frame
		unsigned int numIterations; // The number of iterations of resolutions that we want
	};
}